import OpenAI from "openai";
import fs from "fs";
import path from "path";
import { Readable } from "stream";

if (!process.env.OPENAI_API_KEY) {
  throw new Error("OPENAI_API_KEY environment variable is required");
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Helper function to detect if user is trying to do diagnosis
function isDiagnosticRequest(message: string): boolean {
  const diagnosticKeywords = [
    'sintoma', 'doen√ßa', 'praga', 'problema', 'mancha', 'folha', 'amarela', 'seca', 
    'morrendo', 'apodrecendo', 'fungo', 'inseto', 'diagn√≥stico', 'doente', 'atacada',
    'definhando', 'murcha', 'podrid√£o', 'ferrugem', 'mosca', 'lagarta', 'pulg√£o'
  ];
  
  const lowerMessage = message.toLowerCase();
  return diagnosticKeywords.some(keyword => lowerMessage.includes(keyword));
}

export async function generateAIResponse(
  userMessage: string,
  conversationHistory: Array<{ role: "user" | "assistant"; content: string }> = [],
  mode: "consultation" | "diagnosis" = "consultation",
  userName?: string
): Promise<string> {
  try {
    const systemPrompt = mode === "consultation" 
      ? `Voc√™ √© o Dr. Agro, um assistente agr√≠cola especializado em agricultura brasileira. 
         Responda de forma conversacional, educativa e pr√°tica como um consultor agr√≠cola experiente.
         
         CARACTER√çSTICAS DO MODO CONSULTA:
         - Resposta direta via chat (n√£o gere relat√≥rios estruturados)
         - Linguagem conversacional e acess√≠vel
         - Dicas pr√°ticas e educativas
         - Foque em orienta√ß√µes imediatas
         - M√°ximo 3-4 par√°grafos por resposta
         
         TEMAS PRINCIPAIS:
         - T√©cnicas de cultivo sustent√°vel
         - Manejo de pragas e doen√ßas
         - Nutri√ß√£o de plantas
         - Irriga√ß√£o e solo
         - Calend√°rio agr√≠cola
         - Pr√°ticas org√¢nicas
         
         IMPORTANTE: Se o usu√°rio descrever sintomas espec√≠ficos de doen√ßas, pragas ou problemas nas plantas:
         1. Forne√ßa uma resposta b√°sica educativa
         2. Oriente sempre: "üí° Para um diagn√≥stico mais completo e detalhado com relat√≥rio t√©cnico, recomendo usar o **Modo Diagn√≥stico** (dispon√≠vel no seletor acima). L√° eu posso gerar um relat√≥rio profissional com tratamentos espec√≠ficos."
         
         Sempre considere o clima tropical brasileiro e as culturas t√≠picas do pa√≠s.
         Seja cordial, did√°tico e direto nas respostas.`
      : `Voc√™ √© o Dr. Agro, especialista em diagn√≥stico agr√≠cola. 
         Quando receber uma descri√ß√£o de problema, gere APENAS um relat√≥rio t√©cnico completo seguindo EXATAMENTE este formato simples:

**Diagn√≥stico Prov√°vel:**
[Nome da doen√ßa/praga/defici√™ncia encontrada]

**Descri√ß√£o:**
[Breve descri√ß√£o do que √© a doen√ßa - m√°ximo 2 linhas]

**Sintomas Identificados:**
* [Sintoma principal observado]
* [Segundo sintoma mais comum]
* [Terceiro sintoma caracter√≠stico]
* [Progress√£o esperada]

**Tratamento Recomendado:**
* [Primeira medida de controle]
* [Segunda recomenda√ß√£o de manejo]
* [Produto ou pr√°tica espec√≠fica]
* [Frequ√™ncia de aplica√ß√£o]

**Preven√ß√£o:**
* [Medida preventiva principal]
* [Segunda medida preventiva]
* [Pr√°tica cultural recomendada]
* [Monitoramento sugerido]

**Causas Prov√°veis:**
* [Causa principal]
* [Fator contribuinte]
* [Condi√ß√£o ambiental favor√°vel]

IMPORTANTE: Gere apenas UM relat√≥rio, bem estruturado e direto. N√£o adicione t√≠tulos extras, cabe√ßalhos ou informa√ß√µes duplicadas.`;

    // Check if user is trying to do diagnosis in consultation mode
    if (mode === "consultation" && isDiagnosticRequest(userMessage)) {
      const enhancedMessage = `${userMessage}\n\nIMPORTANTE: O usu√°rio parece estar descrevendo sintomas ou problemas. 
      Forne√ßa uma resposta educativa b√°sica, mas SEMPRE inclua a orienta√ß√£o sobre o Modo Diagn√≥stico.`;
      
      const messages = [
        { role: "system" as const, content: systemPrompt },
        ...conversationHistory,
        { role: "user" as const, content: enhancedMessage }
      ];

      const response = await openai.chat.completions.create({
        model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
        messages: messages,
        max_tokens: 1000,
        temperature: 0.7,
      });

      return response.choices[0].message.content || "Desculpe, n√£o consegui processar sua solicita√ß√£o. Tente novamente.";
    }

    const messages = [
      { role: "system" as const, content: systemPrompt },
      ...conversationHistory,
      { role: "user" as const, content: userMessage }
    ];

    const response = await openai.chat.completions.create({
      model: "gpt-4o", // the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
      messages: messages,
      max_tokens: mode === "diagnosis" ? 2000 : 1000,
      temperature: 0.7,
    });

    return response.choices[0].message.content || "Desculpe, n√£o consegui processar sua solicita√ß√£o. Tente novamente.";
  } catch (error) {
    console.error("Erro ao gerar resposta da IA:", error);
    throw new Error("Erro ao comunicar com a IA. Verifique a configura√ß√£o da API.");
  }
}

export async function analyzeImageWithAI(
  imageBase64: string,
  userMessage: string,
  mode: "consultation" | "diagnosis" = "diagnosis",
  userName?: string
): Promise<string> {
  try {
    if (mode === "diagnosis") {
      // Primeiro, gerar um resumo inicial
      const summaryPrompt = `Voc√™ √© o Dr. Agro, especialista em diagn√≥stico agr√≠cola. 
      Analise a imagem da planta/cultura enviada e gere APENAS um resumo conciso em 2-3 linhas, come√ßando com:
      "üî¨ **An√°lise Realizada:** Identifiquei [problema/condi√ß√£o encontrada] na cultura. [Breve explica√ß√£o]. [Recomenda√ß√£o principal ou urg√™ncia]."`;

      const summaryResponse = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: summaryPrompt
          },
          {
            role: "user",
            content: [
              {
                type: "text",
                text: userMessage || "Analise esta imagem e me d√™ um resumo do diagn√≥stico:"
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${imageBase64}`
                }
              }
            ]
          }
        ],
        max_tokens: 200,
        temperature: 0.7,
      });

      const summary = summaryResponse.choices[0].message.content || "üî¨ **An√°lise Realizada:** An√°lise da imagem conclu√≠da.";
      
      // Depois, gerar o diagn√≥stico completo
      const fullDiagnosisPrompt = `Voc√™ √© o Dr. Agro, especialista em diagn√≥stico agr√≠cola por imagem.
         Analise a imagem fornecida pelo produtor ${userName || 'agricultor'} e gere APENAS um relat√≥rio t√©cnico seguindo EXATAMENTE este formato simples:

**Diagn√≥stico Prov√°vel:**
[Nome da doen√ßa/praga/defici√™ncia identificada na imagem]

**Descri√ß√£o:**
[Breve descri√ß√£o do que √© a doen√ßa - m√°ximo 2 linhas]

**Sintomas Identificados:**
* [Sintoma principal vis√≠vel na imagem]
* [Segundo sintoma observado]
* [Terceiro sintoma caracter√≠stico]
* [Progress√£o esperada]

**Tratamento Recomendado:**
* [Primeira medida de controle]
* [Segunda recomenda√ß√£o de manejo]
* [Produto ou pr√°tica espec√≠fica]
* [Frequ√™ncia de aplica√ß√£o]

**Preven√ß√£o:**
* [Medida preventiva principal]
* [Segunda medida preventiva]
* [Pr√°tica cultural recomendada]
* [Monitoramento sugerido]

**Causas Prov√°veis:**
* [Causa principal identificada]
* [Fator contribuinte]
* [Condi√ß√£o ambiental favor√°vel]
* [Fator de risco identificado]

**Observa√ß√µes Adicionais:**
* [Recomenda√ß√£o espec√≠fica para o caso]
* [Cuidados especiais necess√°rios]
* [Momento ideal para reavaliar]

IMPORTANTE: Gere apenas UM relat√≥rio, bem estruturado e direto. N√£o adicione t√≠tulos extras, cabe√ßalhos ou informa√ß√µes duplicadas.`;

      const fullResponse = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: fullDiagnosisPrompt
          },
          {
            role: "user",
            content: [
              {
                type: "text",
                text: userMessage || "Analise esta imagem e gere o diagn√≥stico completo:"
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${imageBase64}`
                }
              }
            ]
          }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      });

      const fullDiagnosis = fullResponse.choices[0].message.content || "N√£o foi poss√≠vel gerar o diagn√≥stico completo.";
      
      // Retornar estrutura JSON com resumo e diagn√≥stico completo
      return JSON.stringify({
        type: "diagnosis_with_modal",
        summary: summary,
        fullDiagnosis: fullDiagnosis,
        producer: userName || "Agricultor"
      });
    } else {
      // Modo consulta original
      const systemPrompt = `Voc√™ √© o Dr. Agro, especialista em an√°lise agr√≠cola por imagem.
                         Analise a imagem fornecida e identifique:
                         - Problemas vis√≠veis (pragas, doen√ßas, defici√™ncias)
                         - Estado geral da planta/cultura
                         - Recomenda√ß√µes espec√≠ficas
                         
                         Se identificar problemas espec√≠ficos, forne√ßa orienta√ß√µes b√°sicas mas sempre recomende:
                         "üí° Para um diagn√≥stico mais completo e detalhado com relat√≥rio t√©cnico, recomendo usar o **Modo Diagn√≥stico**."
                         
                         Seja preciso e pr√°tico em suas observa√ß√µes.`;

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user",
            content: [
              {
                type: "text",
                text: userMessage || "Analise esta imagem e me diga o que voc√™ observa:"
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${imageBase64}`
                }
              }
            ]
          }
        ],
        max_tokens: 800,
        temperature: 0.7,
      });

      return response.choices[0].message.content || "N√£o consegui analisar a imagem. Tente novamente.";
    }
  } catch (error) {
    console.error("Erro ao analisar imagem:", error);
    throw new Error("Erro ao analisar imagem. Verifique se a imagem est√° no formato correto.");
  }
}

export async function transcribeAudioWithAI(audioBuffer: Buffer): Promise<string> {
  try {
    // Create a readable stream from the buffer
    const audioStream = new Readable();
    audioStream.push(audioBuffer);
    audioStream.push(null); // End the stream
    
    // Add necessary properties to make it work with OpenAI API
    (audioStream as any).path = "audio.wav";
    (audioStream as any).originalname = "audio.wav";
    
    const transcription = await openai.audio.transcriptions.create({
      file: audioStream as any,
      model: "whisper-1",
      language: "pt", // Portuguese
      response_format: "text",
    });

    console.log("Transcri√ß√£o do √°udio:", transcription);

    // Return transcription directly, let the calling function handle empty cases
    return transcription || "";
  } catch (error) {
    console.error("Erro ao transcrever √°udio:", error);
    throw error; // Throw the error to be handled by the calling function
  }
}